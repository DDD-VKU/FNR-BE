// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 'id' - primary key 
// 'default' - a data 
// 'updateAt' auto up-time 
// '?' - enabal to null  

generator client {
  provider = "prisma-client-js"
}

//Source DB from env file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customers {
  id         Int       @id @default(autoincrement())
  name       String
  phone      String?   @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  carts              carts[]
  order              orders[]
  favortite_products favorite_product[]

  account accounts?
  address address[]
  reviews reviews[]
}

model accounts {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  customers   customers @relation(fields: [customer_id], references: [id])
  customer_id Int       @unique

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model address {
  id         Int    @id @default(autoincrement())
  city       String
  country    String
  first_name String
  last_name  String
  phone      String
  province   String
  zipcode    String

  // relationship with customer
  customer    customers @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  customer_id Int
  orders      orders[]
}

enum Type_Payment {
  CREDIT_CARD
  PAYPAL
  CASH
  BANK_TRANSFER
}

model orders {
  id             Int          @id @default(autoincrement())
  order_day      DateTime     @default(now())
  payment_method Type_Payment
  subtotal       Float
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  deleted_at     DateTime?

  // relationship with customer
  customer    customers @relation(fields: [customer_id], references: [id])
  customer_id Int

  // relationship with order_detail
  order_detail order_details[]
  address      address?        @relation(fields: [addressId], references: [id])
  addressId    Int?
}

model order_details {
  id         Int       @id @default(autoincrement())
  price      Int
  quantity   Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // relationship with order
  order    orders @relation(fields: [order_id], references: [id])
  order_id Int

  // relationship with product
  product    products @relation(fields: [product_id], references: [id])
  product_id Int
}

model carts {
  id          Int       @id @default(autoincrement())
  customer_id Int
  customer    customers @relation(fields: [customer_id], references: [id])

  cart_item cart_items[]
}

model cart_items {
  id       Int   @id @default(autoincrement())
  price    Float
  quantity Int

  carts   carts @relation(fields: [cart_id], references: [id])
  cart_id Int   @unique

  product    products @relation(fields: [product_id], references: [id])
  product_id Int      @unique
}

model products {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  SKU         String?
  tags        String[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  // relationships with each
  products_variants products_variants?
  products_images   products_images?
  products_details  products_details?
  products_prices   products_prices?

  // relationships with category
  categories    categories? @relation(fields: [categories_id], references: [id])
  categories_id Int?

  order_detail     order_details[]
  favorite_product favorite_product[]
  cart_items       cart_items[]
  reviews          reviews[]
}

model reviews {
  id         Int       @id @default(autoincrement())
  comment    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  rating     Float

  // relationships with product
  products    products @relation(fields: [products_id], references: [id])
  products_id Int

  // relationship with customer
  customer    customers @relation(fields: [customer_id], references: [id])
  customer_id Int
}

model favorite_product {
  id Int @id @default(autoincrement())

  // relationship with customer
  customer    customers @relation(fields: [customer_id], references: [id])
  customer_id Int

  // relationship with products
  products    products @relation(fields: [products_id], references: [id])
  products_id Int
}

model categories {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  products products[]
}

model products_details {
  id               Int    @id @default(autoincrement())
  sort_description String
  long_description String

  //... 
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // relationships
  products    products @relation(fields: [products_id], references: [id])
  products_id Int      @unique

  dimensions dimensions?
  warrantys  warrantys?
  general    general?
}

model products_images {
  id         Int       @id @default(autoincrement())
  images     String[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // relationships
  products    products @relation(fields: [products_id], references: [id])
  products_id Int      @unique
}

model products_prices {
  id           Int       @id @default(autoincrement())
  price        Float
  sale_percent Float
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  // relationships
  products    products @relation(fields: [products_id], references: [id])
  products_id Int      @unique
}

model products_variants {
  id          Int      @id @default(autoincrement())
  products    products @relation(fields: [products_id], references: [id])
  products_id Int      @unique
  size        String[]
  color       String[]
}

model dimensions {
  id                             Int              @id @default(autoincrement())
  width                          Float?
  height                         Float?
  depth                          Float?
  weight                         Float?
  seat_height                    Float?
  leg_height                     Float?
  productsDetail                 products_details @relation(fields: [products_dimensions_details_id], references: [id])
  products_dimensions_details_id Int              @unique
}

model warrantys {
  id                            Int              @id @default(autoincrement())
  warranty_summary              String?
  warranty_service_type         String?
  covered_in_warranty           String?
  not_covered_in_warranty       String?
  domestic_warranty             String?
  productsDetail                products_details @relation(fields: [products_warrantys_details_id], references: [id])
  products_warrantys_details_id Int              @unique
}

model general {
  id                  Int     @id @default(autoincrement())
  sales_package       String?
  model_number        String?
  secondary_material  String?
  configuration       String?
  upholstery_material String?
  upholstery_color    String?

  //relationship
  productsDetail products_details @relation(fields: [products_general_details_id], references: [id])

  // Foreign key
  products_general_details_id Int @unique
}
